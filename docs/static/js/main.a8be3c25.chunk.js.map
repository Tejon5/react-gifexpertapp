{"version":3,"sources":["components/AddCategory.js","Helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","Hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","alert","c","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MA2CeA,EAtCK,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAAkB,EACDC,mBAAS,aADR,mBAC9BC,EAD8B,KAClBC,EADkB,KAkBxC,OACQ,mCACA,sBAAMC,SAZW,SAACC,GAElB,GADAA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,EACxB,OAAOC,MAAM,qBAEjBT,GAAc,SAAAU,GAAC,OAAIR,GAAJ,mBAAkBQ,QAOjC,SACA,uBACIC,KAAK,OACLC,MAAOV,EACPW,SArBkB,SAACR,GAEvBF,EAAcE,EAAES,OAAOF,e,+BCWbG,EAnBJ,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACHC,EADG,iDAC6CC,UAAUH,GADvD,+DAEUI,MAAMF,GAFhB,cAEHG,EAFG,gBAGYA,EAAKC,OAHjB,uBAGFC,EAHE,EAGFA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAIzCa,QAAQC,IAAIR,GAbH,kBAcJA,GAdI,4CAAH,sDCeCS,EAfK,SAAC,GAAoB,EAAnBN,GAAoB,IAAhBT,EAAe,EAAfA,IAAKU,EAAU,EAAVA,MAE3B,OACI,sBAAKM,UAAU,2DAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCAHS,EAAU,SAAC,GAAe,IAAdrB,EAAa,EAAbA,SAAa,ECJV,SAACA,GAAa,IAAD,EAEXf,mBAAS,CAC/BsB,KAAM,GACNe,SAAQ,IAJyB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAsBrC,OAdAC,qBAAU,WACN1B,EAAQC,GACP0B,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLjB,KAAOoB,EACPL,SAAS,MAGf,UAGP,CAACtB,IAEGuB,EDfiBM,CAAc7B,GAA/BO,EAH2B,EAG3BA,KAAMe,EAHqB,EAGrBA,QAab,OACI,qCACA,oBAAIJ,UAAU,qBAAd,SAAoClB,IACnCsB,GAAW,wCAGZ,qBAAKJ,UAAU,YAAf,SACA,6BAEQX,EAAKE,KAAI,SAAAC,GAAG,OACR,cAAC,EAAD,eAEIA,GADCA,EAAIC,eEKdmB,EAlCM,WAAK,MAGc7C,mBAAS,CAAC,eAHxB,mBAGf8C,EAHe,KAGH/C,EAHG,KAatB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ+C,EAAWtB,KAAI,SAACT,GACb,OAAQ,cAAC,EAAD,CAEPA,SAAYA,GADPA,YCvB7BgC,IAASC,OAER,cAAC,EAAD,IAECC,SAASC,eAAe,W","file":"static/js/main.a8be3c25.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst AddCategory = ({setCategories}) =>{\r\n   const [inputValue, setInputValue] = useState(\"Dale Boke\");\r\n\r\n    const handleInputChange = (e) =>{\r\n      //  console.log(e.target.value);\r\n        setInputValue(e.target.value)\r\n    }\r\n    \r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length<2){\r\n            return alert(\"Escribi bien capo\")\r\n        }else{\r\n        setCategories(c =>[inputValue,...c]);\r\n        }\r\n    }\r\n\r\n\r\nreturn (\r\n        <>\r\n        <form onSubmit={handleSubmit}>\r\n        <input \r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}/>\r\n            \r\n        </form>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\nexport default AddCategory;","import React from \"react\"\r\n\r\n const getGifs = async(category) =>{\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=6tmuFqBAzVVez9b7PqMRUsLYAscIAjlN`;\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n\r\n        const gifs = data.map(img=>{\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images.downsized_medium.url\r\n            }\r\n        })//esta constante se declara para tomar determinados datos dentro del objeto gif que estamos logueando mas abajo\r\n\r\n        console.log(gifs);\r\n      return gifs;\r\n    }\r\n\r\n   // getGifs();\r\n\r\n   export default getGifs;","import React from \"react\";\r\n\r\nconst GifGridItem = ({id, url, title}) =>{\r\n //   console.log(id,url,title)\r\n    return(\r\n        <div className=\"card animate__animated animate__bounce animate__delay-2s\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default GifGridItem;","\r\nimport React from \"react\";\r\nimport { useFetchGifs } from \"../Hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\n\r\n\r\nexport const GifGrid = ({category}) =>{\r\n\r\n  //  const[images, setImages] = useState([]);\r\n    const {data, loading} = useFetchGifs( category );\r\n\r\n/*    useEffect(()=>{\r\n        getGifs(category)\r\n        .then(imgs =>setImages(imgs))\r\n    }, [category])\r\n*/\r\n//en este caso el useEffect encapsula la funcion de abajo y coloca su contenido dentro de un array\r\n//porque resulta que al boton que pusimos, cada vez que lo oprimimos y modifica su valor tmb se descajeta lo renderizado\r\n//funciona como un componentDidMount basicamente... guarda los cambios para no mostrarlos devuelta y solo actualiza el boton\r\n\r\n\r\n\r\n    return( \r\n        <>\r\n        <h3 className=\"animate__heartBeat\">{category}</h3>\r\n        {loading && <p>loading</p>}\r\n\r\n        \r\n        <div className=\"card-grid\">\r\n        <ol>\r\n            {\r\n                data.map(img =>(\r\n                    <GifGridItem \r\n                    key={img.id}\r\n                    {...img}/>\r\n                ))\r\n            }\r\n        </ol>\r\n        </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\n","import {useState, useEffect} from \"react\";\r\nimport getGifs from \"../Helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) =>{\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading:true,\r\n    });\r\n\r\n\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n        .then(imgs=>{\r\n            setTimeout(()=>{\r\n                setState({\r\n                    data : imgs,\r\n                    loading: false,\r\n                })\r\n          \r\n            },2000);\r\n\r\n        })\r\n    }, [category])\r\n\r\n    return state; //{data:[], loading:true}\r\n}","import React from \"react\";\r\nimport {useState} from \"react\"\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport {GifGrid} from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () =>{\r\n\r\n  //  const categories = [\"One Punch \", \"Samurai X \",\"Dragon Ball \"];\r\n    const [categories, setCategories] = useState([\"One Punch \"]);\r\n\r\n/*\r\nconst handleAdd = (e) =>{\r\n    setCategories([... categories, \"HunterXHunter\"]);\r\n// se modifica el estado, se toma el estado anterior y se le agrega dentro del array categories el nuevo valor de \r\n// HunterXHunter\r\n}*/\r\n\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map((category)=>{\r\n                       return  <GifGrid \r\n                        key={category}\r\n                        category = {category}></GifGrid>\r\n                    })\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(\n\n <GifExpertApp/>,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}